#!/usr/bin/env python3

# Original: https://github.com/catppuccin/gtk/blob/main/install.py
# Simplified by me

import os
import zipfile
import argparse
import logging
import io

from typing import Optional
from pathlib import Path
from dataclasses import dataclass
from urllib.request import urlopen, Request

logger = logging.getLogger("catppuccin-gtk")
logger.setLevel(logging.DEBUG)
ch = logging.StreamHandler()
formatter = logging.Formatter("[%(name)s] [%(levelname)s] - %(message)s")
ch.setFormatter(formatter)
logger.addHandler(ch)


@dataclass
class InstallContext:
    flavor: str
    accent: str
    dest: Path

    def build_info(self, include_url=True) -> str:
        url = build_release_url(self)
        info = f"""Installation info:
        flavor:     {self.flavor}
        accent:     {self.accent}"""
        if include_url:
            info += f"\nremote_url: {url}"
        return info


def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "flavor",
        type=str,
        choices=["mocha", "frappe", "macchiato", "latte"],
        help="Flavor of the theme to apply.",
    )

    parser.add_argument(
        "accent",
        type=str,
        default="mauve",
        choices=[
            "rosewater",
            "flamingo",
            "pink",
            "mauve",
            "red",
            "maroon",
            "peach",
            "yellow",
            "green",
            "teal",
            "sky",
            "sapphire",
            "blue",
            "lavender",
        ],
        help="Accent of the theme.",
    )

    return parser.parse_args()


def build_release_url(ctx: InstallContext) -> str:
    repo_root = "https://github.com/catppuccin/gtk/releases/download"
    release = "v1.0.3" # x-release-please-version
    zip_name = f"catppuccin-{ctx.flavor}-{ctx.accent}-standard+default.zip"

    return f"{repo_root}/{release}/{zip_name}"


def fetch_zip(url: str) -> Optional[zipfile.ZipFile]:
    req = Request(url)

    zip_file = None
    logger.info("Starting download...")
    with urlopen(req) as response:
        logger.info(f"Response status: {response.status}")
        zip_file = zipfile.ZipFile(io.BytesIO(response.read()))
    logger.info("Download finished, zip is valid")

    logger.info("Verifying download..")
    first_bad_file = zip_file.testzip()
    if first_bad_file is not None:
        logger.error(f'Zip appears to be corrupt, first bad file is "{first_bad_file}"')
        return None
    logger.info("Download verified")
    return zip_file

def install(ctx: InstallContext):
    url = build_release_url(ctx)
    logger.info(ctx.build_info())

    zip_file = fetch_zip(url)
    if zip_file is None:
        return

    logger.info("Extracting...")
    zip_file.extractall(ctx.dest)
    logger.info("Extraction complete")

def main():
    args = parse_args()

    dest = Path(os.path.expanduser("~")) / ".local" / "share" / "themes"
    os.makedirs(dest, exist_ok=True)

    ctx = InstallContext(
        flavor=args.flavor, accent=args.accent, dest=dest
    )

    install(ctx)
    logger.info("Theme installation complete!")

try:
    main()
except Exception as e:
    logger.error("Something went wrong when installing the theme:", exc_info=e)