# Variables
$mainMod = SUPER
$scripts = ~/.config/hypr/scripts
$rofi-applets = ~/.config/rofi/applets
$launch-app = $scripts/launch_app.sh


# General
bind = $mainMod, Q, killactive, # Exit The Active Window
bind = $mainMod, G, togglefloating
bind = $mainMod, P, pseudo # Toggle pseudo mode
bind = $mainMod, F, fullscreen, 0 # Fullscreen The Active Window
bind = $mainMod, S, togglesplit # Toggle Split
bind = $mainMod + SHIFT, C , exec, waypaper --random # Change Wallpaper Randomly
bind = $mainMod + CTRL, W, exec, pkill waybar || waybar

# Apps and Applets
# bind = $mainMod, V, exec, $rofi-applets/clipboard.sh # Clipboard Manager
# bind = $mainMod, V, exec, cliphist list | rofi -dmenu -display-columns 2 | cliphist decode | wl-copy
bind = $mainMod, V, exec, $rofi-applets/clipboard.sh # Screenshot Manager
bind = $mainMod + SHIFT, S, exec, $rofi-applets/screenshot.sh # Screenshot Manager
bind = $mainMod + SHIFT, B, exec, $rofi-applets/keybindings.sh # Show Keybinds
bind = $mainMod + SHIFT, G, exec, $rofi-applets/hyprshade.sh "rofi" # Screen Shader / Eye Care bash $HOME/.config/hypr/services/waybar.sh -s

bind = $mainMod, SPACE, exec, $scripts/app_launcher.sh # Application Launcher
bind = $mainMod + SHIFT, Q, exec, wlogout # Power Menu

bind = $mainMod, E, exec, $launch-app 'nautilus' # Launch File Manager
bind = $mainMod, RETURN, exec,$launch-app 'kitty' # Launch Terminal
bind = $mainMod + SHIFT, E, exec, $launch-app 'smile' # Launch Smile(Emoji Picker)
bind = $mainMod + SHIFT, escape, exec, $launch-app 'missioncenter' # Launch System Monitor

# Move focus
bind = $mainMod, left, movefocus, l # Move Focus To The Left Window
bind = $mainMod, right, movefocus, r # Move Focus To The Right Window
bind = $mainMod, up, movefocus, u # Move Focus To The Up Window
bind = $mainMod, down, movefocus, d # Move Focus To The Down Window

# Switch workspaces
bind = $mainMod, Tab, workspace, m+1 # Next Non-Empty Workspace
bind = $mainMod + SHIFT, Tab, workspace, m-1 # Previous Non-Empty Workspace

bind = $mainMod, mouse_down, workspace, e+1  # Open next workspace
bind = $mainMod, mouse_up, workspace, e-1    # Open previous workspace
bind = $mainMod CTRL, down, workspace, empty # Open the next empty workspace
binde = ALT,Tab,cyclenext                                                                   # Cycle between windows
binde = ALT,Tab,bringactivetotop                                                            # Bring active window to the top

bind = $mainMod, 1, workspace, 1 # Switch To Workspace 1
bind = $mainMod, 2, workspace, 2 # Switch To Workspace 2
bind = $mainMod, 3, workspace, 3 # Switch To Workspace 3
bind = $mainMod, 4, workspace, 4 # Switch To Workspace 4
bind = $mainMod, 5, workspace, 5 # Switch To Workspace 5
bind = $mainMod, 6, workspace, 6 # Switch To Workspace 6
bind = $mainMod, 7, workspace, 7 # Switch To Workspace 7
bind = $mainMod, 8, workspace, 8 # Switch To Workspace 8
bind = $mainMod, 9, workspace, 9 # Switch To Workspace 9

# Move active window to workspace
bind = $mainMod + SHIFT, 1, movetoworkspace, 1 # Move Active Window To Workspace 1
bind = $mainMod + SHIFT, 2, movetoworkspace, 2 # Move Active Window To Workspace 2
bind = $mainMod + SHIFT, 3, movetoworkspace, 3 # Move Active Window To Workspace 3
bind = $mainMod + SHIFT, 4, movetoworkspace, 4 # Move Active Window To Workspace 4
bind = $mainMod + SHIFT, 5, movetoworkspace, 5 # Move Active Window To Workspace 5
bind = $mainMod + SHIFT, 6, movetoworkspace, 6 # Move Active Window To Workspace 6
bind = $mainMod + SHIFT, 7, movetoworkspace, 7 # Move Active Window To Workspace 7
bind = $mainMod + SHIFT, 8, movetoworkspace, 8 # Move Active Window To Workspace 8
bind = $mainMod + SHIFT, 9, movetoworkspace, 9 # Move Active Window To Workspace 9

# Move all windows to workspace
bind = $mainMod + CTRL, 1, exec, $scripts/move_all.sh 1 # Move All Windows To Workspace 1
bind = $mainMod + CTRL, 2, exec, $scripts/move_all.sh 2 # Move All Windows To Workspace 2
bind = $mainMod + CTRL, 3, exec, $scripts/move_all.sh 3 # Move All Windows To Workspace 3
bind = $mainMod + CTRL, 4, exec, $scripts/move_all.sh 4 # Move All Windows To Workspace 4
bind = $mainMod + CTRL, 5, exec, $scripts/move_all.sh 5 # Move All Windows To Workspace 5
bind = $mainMod + CTRL, 6, exec, $scripts/move_all.sh 6 # Move All Windows To Workspace 6
bind = $mainMod + CTRL, 7, exec, $scripts/move_all.sh 7 # Move All Windows To Workspace 7
bind = $mainMod + CTRL, 8, exec, $scripts/move_all.sh 8 # Move All Windows To Workspace 8
bind = $mainMod + CTRL, 9, exec, $scripts/move_all.sh 9 # Move All Windows To Workspace 9

# Reize/Move active
binde = $mainMod + CTRL, left, resizeactive, -20 0 # Resize Active Window To Left
binde = $mainMod + CTRL, right, resizeactive, 20 0 # Resize Active Window To Right
binde = $mainMod + CTRL, up, resizeactive, 0 -20 # Resize Active Window To Up
binde = $mainMod + CTRL, down, resizeactive, 0 20 # Resize Active Window To Down
# https://wiki.hypr.land/Configuring/Binds/#mouse-binds
bindm = $mainMod, mouse:273, resizewindow # Risize Window
bindm = $mainMod, mouse:272, movewindow      # ALT + LMB: Move a window by dragging more than 10px.
bindc = $mainMod , mouse:272, togglefloating  # ALT + LMB: Floats a window by clicking


# Functions keys
bind = , XF86MonBrightnessUp, exec, brightnessctl set 10%+ -m | awk -F ',' '{print $4+0}' | xargs -I[] notify-send -e -u low -h string:x-canonical-private-synchronous:brightness_notif -h int:value:[] "󰃠 Brightness: []%"
bind = , XF86MonBrightnessDown, exec, brightnessctl set 10%- -m | awk -F ',' '{print $4+0}' | xargs -I[] notify-send -e -u low -h string:x-canonical-private-synchronous:brightness_notif -h int:value:[] "󰃠 Brightness: []%"
bind = , XF86AudioRaiseVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ +5% && pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '\d+(?=%)' | head -1 | xargs -I[] notify-send -e -u low -h string:x-canonical-private-synchronous:volume_notif -h int:value:[] "󰕾 Volume: []%"
bind = , XF86AudioLowerVolume, exec, pactl set-sink-volume @DEFAULT_SINK@ -5% && pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '\d+(?=%)' | head -1 | xargs -I[] notify-send -e -u low -h string:x-canonical-private-synchronous:volume_notif -h int:value:[] "󰕾 Volume: []%"
bind = , XF86AudioMute, exec, pactl set-sink-mute @DEFAULT_SINK@ toggle && pactl get-sink-mute @DEFAULT_SINK@ | grep -q 'yes' && notify-send -e -u low -h string:x-canonical-private-synchronous:volume_notif -h int:value:0 "󰖁 Volume: Muted" || pactl get-sink-volume @DEFAULT_SINK@ | grep -oP '\d+(?=%)' | head -1 | xargs -I[] notify-send -e -u low -h string:x-canonical-private-synchronous:volume_notif -h int:value:[] "󰕾 Volume: []%"
bind = , XF86AudioNext, exec, playerctl next
bind = , XF86AudioPause, exec, playerctl pause
bind = , XF86AudioPlay, exec, playerctl play-pause
bind = , XF86AudioPrev, exec, playerctl previous
bind = , XF86AudioNext, exec, playerctl next
